//use crate::vl1::Address;

/*
/// Handler for events generated by the node that pertain to VL1.
pub trait VL1NodeEventHandler: Sync + Send {
    /// Called when a core ZeroTier event occurs.
    fn event(&self, event: Event, event_data: &[u8]);

    /// Called to store an object into the object store.
    fn state_put(&self, obj_type: StateObjectType, obj_id: &[u64], obj_data: &[u8]) -> std::io::Result<()>;

    /// Called to retrieve an object from the object store.
    fn state_get(&self, obj_type: StateObjectType, obj_id: &[u64]) -> std::io::Result<Vec<u8>>;

    /// Called to send a packet over the physical network (virtual -> physical).
    fn wire_packet_send(&self, local_socket: i64, sock_addr: &InetAddress, data: &[u8], packet_ttl: u32) -> i32;

    /// Called to check and see if a physical address should be used for ZeroTier traffic.
    fn path_check(&self, address: Address, id: &Identity, local_socket: i64, sock_addr: &InetAddress) -> bool;

    /// Called to look up a path to a known node, allowing out of band lookup methods for physical paths to nodes.
    fn path_lookup(&self, address: Address, id: &Identity, desired_family: InetAddressFamily) -> Option<InetAddress>;
}

pub struct Node<H: VL1NodeEventHandler> {
    handler: H,
}

impl<H: VL1NodeEventHandler> Node<H> {
    pub fn new(handler: H) -> Self {
        Self {
            handler,
        }
    }

    pub fn handler(&self) -> &H {
        &self.handler
    }

    pub fn handler_mut(&mut self) -> &mut H {
        &mut self.handler
    }

    /// Perform periodic background tasks.
    /// The first call should happen no more than NODE_BACKGROUND_TASKS_MAX_INTERVAL milliseconds
    /// since the node was created, and after this runs it returns the amount of time the caller
    /// should wait before calling it again.
    #[inline(always)]
    pub fn process_background_tasks(&self, clock: i64, ticks: i64) -> i64 {
        0
    }

    /// Get the address of this node.
    #[inline(always)]
    pub fn address(&self) -> Address {
        Address::default()
    }
}
*/